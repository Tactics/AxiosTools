'use strict';

var axios = require('axios');

var p=async s=>{let e=s.params.namespace||!1,o=e?"X-"+e:"X-",a=s.params.deviceId||"unknown",r=s.params.deviceName||"unknown";return s.headers.set(o+"Device-Id",a).set(o+"Device-Name",r),s};var l=async s=>{let e=s.params.namespace||!1,o=e?"X-"+e:"X-",a=window.location.host.split(":")[0];return s.headers.set(o+"Domain",a),s};var A=async s=>{let e=s.params.language||"en";return s.headers.set("Accept-Language",e),s};var u=async s=>(s.headers.set("Content-Type","application/json").set("Accept","application/json"),s);var R=async s=>{let e=s.params.access_token||!1;return e&&s.headers.set("Authorization","Bearer "+e),s};var t=class{get(e){return this.mock_call(e)}post(e){return this.mock_call(e)}patch(e){return this.mock_call(e)}put(e){return this.mock_call(e)}delete(e){return this.mock_call(e)}mock_call({success:e,failure:o,failure_code:a,time:r=800,successRate:n=.9,response_headers:i,request_headers:c=new axios.AxiosHeaders}){return new Promise((x,m)=>{setTimeout(()=>{if(Math.random()<n||n==1)x({data:e,status:200,statusText:"OK",headers:i??{},config:{headers:c},request:{}});else {let d={response:{data:o,status:a,statusText:"Error",headers:i??{},config:{},request:{}},isAxiosError:!0,toJSON:()=>({})};m(axios.AxiosError.from(d));}},r);})}};

exports.AxiosMock = t;
exports.addAccessTokenHeader = R;
exports.addDeviceHeader = p;
exports.addDomainHeader = l;
exports.addJsonHeaders = u;
exports.addLanguageHeader = A;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,