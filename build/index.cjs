'use strict';

var axios = require('axios');

var p=e=>Promise.reject(e);var l=async e=>{let s=e.params.namespace||!1,o=s?"X-"+s:"X-",r=e.params.deviceId||"unknown",a=e.params.deviceName||"unknown";return e.headers.set(o+"Device-Id",r).set(o+"Device-Name",a),e};var A=async e=>{let s=e.params.namespace||!1,o=s?"X-"+s:"X-",r=window.location.host.split(":")[0];return e.headers.set(o+"Domain",r),e};var u=async e=>{let s=e.params.language||"en";return e.headers.set("Accept-Language",s),e};var R=async e=>(e.headers.set("Content-Type","application/json").set("Accept","application/json"),e);var f=async e=>{let s=e.params.access_token||!1;return s&&e.headers.set("Authorization","Bearer "+s),e};var t=class{get(s){return this.mock_call(s)}post(s){return this.mock_call(s)}patch(s){return this.mock_call(s)}put(s){return this.mock_call(s)}delete(s){return this.mock_call(s)}mock_call({success:s,failure:o,failure_code:r,time:a=800,successRate:n=.9,response_headers:i,request_headers:x=new axios.AxiosHeaders}){return new Promise((d,m)=>{setTimeout(()=>{if(Math.random()<n||n==1)d({data:s,status:200,statusText:"OK",headers:i??{},config:{headers:x},request:{}});else {let c={response:{data:o,status:r,statusText:"Error",headers:i??{},config:{},request:{}},isAxiosError:!0,toJSON:()=>({})};m(axios.AxiosError.from(c));}},a);})}};

exports.AxiosMock = t;
exports.addAccessTokenHeader = f;
exports.addDeviceHeader = l;
exports.addDomainHeader = A;
exports.addJsonHeaders = R;
exports.addLanguageHeader = u;
exports.interceptorFailure = p;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,