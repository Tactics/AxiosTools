import { AxiosError, AxiosHeaders } from 'axios';

var e=class{get(s){return this.mock_call(s)}post(s){return this.mock_call(s)}patch(s){return this.mock_call(s)}put(s){return this.mock_call(s)}delete(s){return this.mock_call(s)}mock_call({success:s,failure:t,failure_code:a,time:c=800,successRate:o=.9,response_headers:r,request_headers:n=new AxiosHeaders}){return new Promise((l,x)=>{setTimeout(()=>{if(Math.random()<o||o==1)l({data:s,status:200,statusText:"OK",headers:r??{},config:{headers:n},request:{}});else {let i={response:{data:t,status:a,statusText:"Error",headers:r??{},config:{},request:{}},isAxiosError:!0,toJSON:()=>({})};x(AxiosError.from(i));}},c);})}};

export { e as AxiosMock };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9heGlvcy9tb2Nrcy9tb2NrLnRzIl0sIm5hbWVzIjpbIkF4aW9zRXJyb3IiLCJBeGlvc0hlYWRlcnMiLCJBeGlvc01vY2siLCJwcm9wcyIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiZmFpbHVyZV9jb2RlIiwidGltZSIsInN1Y2Nlc3NSYXRlIiwicmVzcG9uc2VfaGVhZGVycyIsInJlcXVlc3RfaGVhZGVycyIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvclJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUNFLGNBQUFBLEVBQ0EsZ0JBQUFDLE1BS0ssUUFZQSxJQUFNQyxFQUFOLEtBQXlCLENBQzlCLElBQUlDLEVBQWtELENBQ3BELE9BQU8sS0FBSyxVQUFVQSxDQUFLLENBQzdCLENBRUEsS0FBS0EsRUFBa0QsQ0FDckQsT0FBTyxLQUFLLFVBQVVBLENBQUssQ0FDN0IsQ0FFQSxNQUFNQSxFQUFrRCxDQUN0RCxPQUFPLEtBQUssVUFBVUEsQ0FBSyxDQUM3QixDQUVBLElBQUlBLEVBQWtELENBQ3BELE9BQU8sS0FBSyxVQUFVQSxDQUFLLENBQzdCLENBRUEsT0FBT0EsRUFBa0QsQ0FDdkQsT0FBTyxLQUFLLFVBQVVBLENBQUssQ0FDN0IsQ0FFUSxVQUFVLENBQ2hCLFFBQUFDLEVBQ0EsUUFBQUMsRUFDQSxhQUFBQyxFQUNBLEtBQUFDLEVBQU8sSUFDUCxZQUFBQyxFQUFjLEdBQ2QsaUJBQUFDLEVBQ0EsZ0JBQUFDLEVBQWtCLElBQUlULENBQ3hCLEVBQThDLENBQzVDLE9BQU8sSUFBSSxRQUEwQixDQUFDVSxFQUFTQyxJQUFXLENBQ3hELFdBQVcsSUFBTSxDQUVmLEdBQUksS0FBSyxPQUFPLEVBQUlKLEdBQWVBLEdBQWUsRUFZaERHLEVBWDBDLENBQ3hDLEtBQU1QLEVBQ04sT0FBUSxJQUNSLFdBQVksS0FDWixRQUFTSyxHQUFvQixDQUFDLEVBQzlCLE9BQVEsQ0FDTixRQUFTQyxDQUNYLEVBQ0EsUUFBUyxDQUFDLENBQ1osQ0FFdUIsTUFDbEIsQ0FDTCxJQUFNRyxFQUFnQixDQUNwQixTQUFVLENBQ1IsS0FBTVIsRUFDTixPQUFRQyxFQUNSLFdBQVksUUFDWixRQUFTRyxHQUFvQixDQUFDLEVBQzlCLE9BQVEsQ0FBQyxFQUNULFFBQVMsQ0FBQyxDQUNaLEVBQ0EsYUFBYyxHQUNkLE9BQVEsS0FBTyxDQUFDLEVBQ2xCLEVBRUFHLEVBQU9aLEVBQVcsS0FBS2EsQ0FBYSxDQUFDLENBQ3ZDLENBQ0YsRUFBR04sQ0FBSSxDQUNULENBQUMsQ0FDSCxDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXhpb3NFcnJvcixcbiAgQXhpb3NIZWFkZXJzLFxuICBBeGlvc1JlcXVlc3RIZWFkZXJzLFxuICBBeGlvc1Jlc3BvbnNlLFxuICBBeGlvc1Jlc3BvbnNlSGVhZGVycyxcbiAgUmF3QXhpb3NSZXNwb25zZUhlYWRlcnMsXG59IGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEF4aW9zTW9ja0NhbGxJIHtcbiAgc3VjY2VzczogYW55O1xuICByZXNwb25zZV9oZWFkZXJzPzogUmF3QXhpb3NSZXNwb25zZUhlYWRlcnMgfCBBeGlvc1Jlc3BvbnNlSGVhZGVycztcbiAgcmVxdWVzdF9oZWFkZXJzPzogQXhpb3NSZXF1ZXN0SGVhZGVycztcbiAgZmFpbHVyZTogYW55O1xuICBmYWlsdXJlX2NvZGU6IHN0cmluZztcbiAgdGltZT86IG51bWJlcjtcbiAgc3VjY2Vzc1JhdGU/OiAwIHwgMC4xIHwgMC4yIHwgMC4zIHwgMC40IHwgMC41IHwgMC42IHwgMC43IHwgMC44IHwgMC45IHwgMTtcbn1cblxuZXhwb3J0IGNsYXNzIEF4aW9zTW9jazxUID0gYW55PiB7XG4gIGdldChwcm9wczogQXhpb3NNb2NrQ2FsbEkpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5tb2NrX2NhbGwocHJvcHMpO1xuICB9XG5cbiAgcG9zdChwcm9wczogQXhpb3NNb2NrQ2FsbEkpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5tb2NrX2NhbGwocHJvcHMpO1xuICB9XG5cbiAgcGF0Y2gocHJvcHM6IEF4aW9zTW9ja0NhbGxJKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMubW9ja19jYWxsKHByb3BzKTtcbiAgfVxuXG4gIHB1dChwcm9wczogQXhpb3NNb2NrQ2FsbEkpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5tb2NrX2NhbGwocHJvcHMpO1xuICB9XG5cbiAgZGVsZXRlKHByb3BzOiBBeGlvc01vY2tDYWxsSSk6IFByb21pc2U8QXhpb3NSZXNwb25zZTxUPj4ge1xuICAgIHJldHVybiB0aGlzLm1vY2tfY2FsbChwcm9wcyk7XG4gIH1cblxuICBwcml2YXRlIG1vY2tfY2FsbCh7XG4gICAgc3VjY2VzcyxcbiAgICBmYWlsdXJlLFxuICAgIGZhaWx1cmVfY29kZSxcbiAgICB0aW1lID0gODAwLFxuICAgIHN1Y2Nlc3NSYXRlID0gMC45LFxuICAgIHJlc3BvbnNlX2hlYWRlcnMsXG4gICAgcmVxdWVzdF9oZWFkZXJzID0gbmV3IEF4aW9zSGVhZGVycygpLFxuICB9OiBBeGlvc01vY2tDYWxsSSk6IFByb21pc2U8QXhpb3NSZXNwb25zZTxUPj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPFQ+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gU2ltdWxhdGUgYSBzdWNjZXNzZnVsIEFQSSBjYWxsIHdpdGggYSBzcGVjaWZpZWQgc3VjY2VzcyByYXRlXG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgc3VjY2Vzc1JhdGUgfHwgc3VjY2Vzc1JhdGUgPT0gMSkge1xuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NSZXNwb25zZTogQXhpb3NSZXNwb25zZTxUPiA9IHtcbiAgICAgICAgICAgIGRhdGE6IHN1Y2Nlc3MsXG4gICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IFwiT0tcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlX2hlYWRlcnMgPz8ge30sXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdF9oZWFkZXJzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3Q6IHt9LFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3NSZXNwb25zZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICAgIGRhdGE6IGZhaWx1cmUsXG4gICAgICAgICAgICAgIHN0YXR1czogZmFpbHVyZV9jb2RlLFxuICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBcIkVycm9yXCIsXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlX2hlYWRlcnMgPz8ge30sXG4gICAgICAgICAgICAgIGNvbmZpZzoge30sXG4gICAgICAgICAgICAgIHJlcXVlc3Q6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIHRvSlNPTjogKCkgPT4gKHt9KSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVqZWN0KEF4aW9zRXJyb3IuZnJvbShlcnJvclJlc3BvbnNlKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRpbWUpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=